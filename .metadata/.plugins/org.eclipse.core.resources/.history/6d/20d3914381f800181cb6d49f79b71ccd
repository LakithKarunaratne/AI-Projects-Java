import au.edu.ecu.is.neural.*;

import java.util.*;

/**
 * Demo program showing a simple MLP solving simple binary problems.
 * 
 * @author phi 
 * @version 2003/2
 */
public class MLPExample
{
	  
    private static final int HIDDEN = 5;
    private static final double LEARNING_RATE = 0.25;
    private static final double MOMENTUM = 0.5;
    private static final boolean ADAPTIVE = false;
    
    private static final double MIN_ERROR_PER_OUTPUT = 0.02;
    private static final int MAX_EPOCHS = 20000;
    
    private static final double NOISE = 0.1;
    
    private static final int PROBLEM_NUMBER = 3;  // determines which problem to use
    
    private static final String[] problems = // names of files containing the problems
        {
    		"D:\\PhD\\IS - AI - ACBT\\EclipseJavaProjects\\W4 - Neural Demos\\src\\and.problem",      // two inputs, one output, which is the result of applying the named logical operation
    		"D:\\PhD\\IS - AI - ACBT\\EclipseJavaProjects\\W4 - Neural Demos\\src\\or.problem",
    		"D:\\PhD\\IS - AI - ACBT\\EclipseJavaProjects\\W4 - Neural Demos\\src\\xor.problem",       // this one is not separable, so a perceptron can't solve it
            "D:\\PhD\\IS - AI - ACBT\\EclipseJavaProjects\\W4 - Neural Demos\\src\\digits.problem",
            "D:\\PhD\\IS - AI - ACBT\\EclipseJavaProjects\\W4 - Neural Demos\\src\\iris.problem"
        };
	
    public static void main(String[] args) throws Exception
    {
        MLPExample mlpExample = new MLPExample();
        
        mlpExample.go();
    }
    
    public void go() throws Exception
    {
        Random random = new Random();
        
        // read the problem to solve from file
        ClassificationProblem problem = (ClassificationProblem)ClassificationProblem.readProblem(problems[PROBLEM_NUMBER]);
        int nInputs = problem.getNInputs();
        int nOutputs = problem.getNOutputs();
        
        // create noisy versions for training and testing
        ClassificationProblem trainingProblem = ClassificationProblem.addGaussian(problem, random, 1, NOISE);
        ClassificationProblem testProblem = ClassificationProblem.addGaussian(problem, random, 5, NOISE);
        
        // construct a mlp to try to solve it
        int[] layerSizes = new int[]{nInputs, HIDDEN, nOutputs};
        MultiLayerPerceptron mlp = new MultiLayerPerceptron(layerSizes, random, LEARNING_RATE, MOMENTUM, ADAPTIVE);
        
        // set this as the problem to solve
        mlp.setTrainingProblem(trainingProblem);
        mlp.setTestProblem(testProblem);
        mlp.setMinError(MIN_ERROR_PER_OUTPUT*problem.getNOutputs());
        mlp.setMaxEpochs(MAX_EPOCHS);
        
        //mlp.showClassification();    // a display showing decision regions
                
        mlp.showLearning();         // a display that shows the error during learning, and has controls to start/stop learning
    }  
  
}




















